"""
This type stub file was generated by pyright.
"""

from ctypes import *
from ctypes.wintypes import *
from .Enum import *
from .Constants import *
from .Attributes import *

_library_path = ...
LOGGER = ...

def millis():  # -> int:
    ...

class SimConnect:
    def IsHR(self, hr, value): ...
    def handle_id_event(self, event):  # -> None:
        ...
    def handle_simobject_event(self, ObjData):  # -> None:
        ...
    def handle_exception_event(self, exc):  # -> None:
        ...
    def handle_state_event(self, pData):  # -> None:
        ...
    def my_dispatch_proc(self, pData, cbData, pContext):  # -> None:
        ...
    def __init__(self, auto_connect=..., library_path=...) -> None: ...
    def connect(self):  # -> None:
        ...
    def exit(self):  # -> None:
        ...
    def map_to_sim_event(self, name):  # -> SIMCONNECT_CLIENT_EVENT_ID | None:
        ...
    def add_to_notification_group(self, group, evnt, bMaskable=...):  # -> None:
        ...
    def request_data(self, _Request):  # -> None:
        ...
    def set_data(self, _Request):  # -> bool:
        ...
    def get_data(self, _Request):  # -> bool:
        ...
    def send_event(self, evnt, data=...):  # -> bool:
        ...
    def new_def_id(self):  # -> SIMCONNECT_DATA_DEFINITION_ID:
        ...
    def new_request_id(self):  # -> SIMCONNECT_DATA_REQUEST_ID:
        ...
    def add_waypoints(self, _waypointlist):  # -> None:
        ...
    def set_pos(
        self,
        _Altitude,
        _Latitude,
        _Longitude,
        _Airspeed,
        _Pitch=...,
        _Bank=...,
        _Heading=...,
        _OnGround=...,
    ):  # -> bool:
        ...
    def load_flight(self, flt_path):  # -> bool:
        ...
    def load_flight_plan(self, pln_path):  # -> bool:
        ...
    def save_flight(
        self,
        flt_path,
        flt_title,
        flt_description,
        flt_mission_type=...,
        flt_mission_location=...,
        flt_original_flight=...,
        flt_flight_type=...,
    ):  # -> Literal[False]:
        ...
    def get_paused(self):  # -> None:
        ...
    def dic_to_flight(self, dic, fpath):  # -> None:
        ...
    def flight_to_dic(self, fpath):  # -> dict[Any, Any]:
        ...
    def sendText(self, text, timeSeconds=..., TEXT_TYPE=...):  # -> None:
        ...
    def createSimulatedObject(
        self,
        name,
        lat,
        lon,
        rqst,
        hdg=...,
        gnd=...,
        alt=...,
        pitch=...,
        bank=...,
        speed=...,
    ):  # -> None:
        ...
